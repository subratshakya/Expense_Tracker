<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 612faa9106d3f31c019c81e2e601cf7d17c60697
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsCappedOperation = void 0;
const error_1 = require("../error");
const operation_1 = require("./operation");
/** @internal */
class IsCappedOperation extends operation_1.AbstractOperation {
    constructor(collection, options) {
        super(options);
        this.options = options;
        this.collection = collection;
    }
<<<<<<< HEAD
=======
    get commandName() {
        return 'listCollections';
    }
>>>>>>> 612faa9106d3f31c019c81e2e601cf7d17c60697
    async execute(server, session) {
        const coll = this.collection;
        const [collection] = await coll.s.db
            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })
            .toArray();
        if (collection == null || collection.options == null) {
            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);
        }
        return !!collection.options?.capped;
    }
}
exports.IsCappedOperation = IsCappedOperation;
<<<<<<< HEAD
//# sourceMappingURL=is_capped.js.map
=======
'use strict';

const OptionsOperation = require('./options_operation');
const handleCallback = require('../utils').handleCallback;

class IsCappedOperation extends OptionsOperation {
  constructor(collection, options) {
    super(collection, options);
  }

  execute(callback) {
    super.execute((err, document) => {
      if (err) return handleCallback(callback, err);
      handleCallback(callback, null, !!(document && document.capped));
    });
  }
}

module.exports = IsCappedOperation;
>>>>>>> d9b5d8d4d7e7782577668ed9860ec566a14c8070
=======
//# sourceMappingURL=is_capped.js.map
>>>>>>> 612faa9106d3f31c019c81e2e601cf7d17c60697
